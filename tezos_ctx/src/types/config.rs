use serde::{Deserialize, Serialize};
use tezos_core::types::number::Nat;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct Ratio {
    pub numerator: i32,
    pub denominator: i32,
}

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct DalParametric {
    pub feature_enable: bool,
    pub number_of_slots: i32,
    pub attestation_lag: i32,
    pub attestation_threshold: i32,
    //pub availability_threshold: i32,
    pub blocks_per_epoch: i32,
    pub redundancy_factor: i32,
    pub page_size: i32,
    pub slot_size: i32,
    pub number_of_shards: i32,
}

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct TezosConfig {
    pub proof_of_work_nonce_size: i32,
    pub nonce_length: i32,
    pub max_anon_ops_per_block: i32,
    pub max_operation_data_length: i32,
    pub max_proposals_per_delegate: i32,
    pub max_micheline_node_count: i32,
    pub max_micheline_bytes_limit: i32,
    pub max_allowed_global_constants_depth: i32,
    pub cache_layout_size: i32,
    pub michelson_maximum_type_size: i32,
    pub smart_rollup_max_wrapped_proof_binary_size: i32,
    pub smart_rollup_message_size_limit: i32,
    pub smart_rollup_max_number_of_messages_per_level: Nat,
    pub preserved_cycles: i32,
    pub blocks_per_cycle: i32,
    pub blocks_per_commitment: i32,
    pub nonce_revelation_threshold: i32,
    pub blocks_per_stake_snapshot: i32,
    pub cycles_per_voting_period: i32,
    pub hard_gas_limit_per_operation: Nat,
    pub hard_gas_limit_per_block: Nat,
    pub proof_of_work_threshold: Nat,
    pub minimal_stake: Nat,
    pub vdf_difficulty: Nat,
    pub seed_nonce_revelation_tip: Nat,
    pub origination_size: i32,
    pub baking_reward_fixed_portion: Nat,
    pub baking_reward_bonus_per_slot: Nat,
    pub endorsing_reward_per_slot: Nat,
    pub cost_per_byte: Nat,
    pub hard_storage_limit_per_operation: Nat,
    pub quorum_min: i32,
    pub quorum_max: i32,
    pub min_proposal_quorum: i32,
    pub liquidity_baking_subsidy: Nat,
    pub liquidity_baking_toggle_ema_threshold: i32,
    pub max_operations_time_to_live: i32,
    pub minimal_block_delay: Nat,
    pub delay_increment_per_round: Nat,
    pub consensus_committee_size: i32,
    pub consensus_threshold: i32,
    pub minimal_participation_ratio: Ratio,
    pub max_slashing_period: i32,
    pub frozen_deposits_percentage: i32,
    pub double_baking_punishment: Nat,
    pub ratio_of_frozen_deposits_slashed_per_double_endorsement: Ratio,
    //pub testnet_dictator: Nat,
    //pub initial_seed: Nat,
    pub cache_script_size: i32,
    pub cache_stake_distribution_cycles: i32,
    pub cache_sampler_state_cycles: i32,
    pub tx_rollup_enable: bool,
    pub tx_rollup_origination_size: i32,
    pub tx_rollup_hard_size_limit_per_inbox: i32,
    pub tx_rollup_hard_size_limit_per_message: i32,
    pub tx_rollup_max_withdrawals_per_batch: i32,
    pub tx_rollup_commitment_bond: Nat,
    pub tx_rollup_finality_period: i32,
    pub tx_rollup_withdraw_period: i32,
    pub tx_rollup_max_inboxes_count: i32,
    pub tx_rollup_max_messages_per_inbox: i32,
    pub tx_rollup_max_commitments_count: i32,
    pub tx_rollup_cost_per_byte_ema_factor: i32,
    pub tx_rollup_max_ticket_payload_size: i32,
    pub tx_rollup_rejection_max_proof_size: i32,
    pub tx_rollup_sunset_level: i32,
    pub dal_parametric: DalParametric,
    pub smart_rollup_enable: bool,
    pub smart_rollup_arith_pvm_enable: bool,
    pub smart_rollup_origination_size: i32,
    pub smart_rollup_challenge_window_in_blocks: i32,
    pub smart_rollup_stake_amount: Nat,
    pub smart_rollup_commitment_period_in_blocks: i32,
    pub smart_rollup_max_lookahead_in_blocks: i32,
    pub smart_rollup_max_active_outbox_levels: i32,
    pub smart_rollup_max_outbox_messages_per_level: i32,
    pub smart_rollup_number_of_sections_in_dissection: i32,
    pub smart_rollup_timeout_period_in_blocks: i32,
    pub smart_rollup_max_number_of_cemented_commitments: i32,
    pub smart_rollup_max_number_of_parallel_games: i32,
    pub zk_rollup_enable: bool,
    pub zk_rollup_origination_size: i32,
    pub zk_rollup_min_pending_to_process: i32,
}

impl TezosConfig {
    pub fn default() -> Self {
        Self {
            proof_of_work_nonce_size: 8,
            nonce_length: 32,
            max_anon_ops_per_block: 132,
            max_operation_data_length: 86400,
            max_proposals_per_delegate: 20,
            max_micheline_node_count: 50000,
            max_micheline_bytes_limit: 50000,
            max_allowed_global_constants_depth: 10000,
            cache_layout_size: 3,
            michelson_maximum_type_size: 2001,
            smart_rollup_max_wrapped_proof_binary_size: 30000,
            smart_rollup_message_size_limit: 4096,
            smart_rollup_max_number_of_messages_per_level: 1000000u64.into(),
            preserved_cycles: 5,
            blocks_per_cycle: 8096,
            blocks_per_commitment: 128,
            nonce_revelation_threshold: 512,
            blocks_per_stake_snapshot: 1024,
            cycles_per_voting_period: 5,
            hard_gas_limit_per_operation: 1040000u64.into(),
            hard_gas_limit_per_block: 5200000u64.into(),
            proof_of_work_threshold: 70368744177663u64.into(),
            minimal_stake: 6000000000u64.into(),
            vdf_difficulty: 8000000000u64.into(),
            seed_nonce_revelation_tip: 125000u64.into(),
            origination_size: 257,
            baking_reward_fixed_portion: 5000000u64.into(),
            baking_reward_bonus_per_slot: 2143u64.into(),
            endorsing_reward_per_slot: 1428u64.into(),
            cost_per_byte: 250u32.into(),
            hard_storage_limit_per_operation: 60000u64.into(),
            quorum_min: 2000,
            quorum_max: 7000,
            min_proposal_quorum: 500,
            liquidity_baking_subsidy: 1250000u64.into(),
            liquidity_baking_toggle_ema_threshold: 1000000000,
            max_operations_time_to_live: 240,
            minimal_block_delay: 15u64.into(),
            delay_increment_per_round: 8u64.into(),
            consensus_committee_size: 7000,
            consensus_threshold: 4667,
            minimal_participation_ratio: Ratio {
                numerator: 2,
                denominator: 3,
            },
            max_slashing_period: 2,
            frozen_deposits_percentage: 10,
            double_baking_punishment: 640000000u64.into(),
            ratio_of_frozen_deposits_slashed_per_double_endorsement: Ratio {
                numerator: 1,
                denominator: 2,
            },
            cache_script_size: 100000000,
            cache_stake_distribution_cycles: 8,
            cache_sampler_state_cycles: 8,
            tx_rollup_enable: false,
            tx_rollup_origination_size: 4000,
            tx_rollup_hard_size_limit_per_inbox: 500000,
            tx_rollup_hard_size_limit_per_message: 5000,
            tx_rollup_max_withdrawals_per_batch: 15,
            tx_rollup_commitment_bond: 10000000000u64.into(),
            tx_rollup_finality_period: 40000,
            tx_rollup_withdraw_period: 40000,
            tx_rollup_max_inboxes_count: 40100,
            tx_rollup_max_messages_per_inbox: 1010,
            tx_rollup_max_commitments_count: 80100,
            tx_rollup_cost_per_byte_ema_factor: 120,
            tx_rollup_max_ticket_payload_size: 2048,
            tx_rollup_rejection_max_proof_size: 30000,
            tx_rollup_sunset_level: 3473409,
            dal_parametric: DalParametric {
                feature_enable: false,
                number_of_slots: 256,
                attestation_lag: 1,
                attestation_threshold: 50,
                //availability_threshold: 50,
                blocks_per_epoch: 1,
                redundancy_factor: 16,
                page_size: 4096,
                slot_size: 1048576,
                number_of_shards: 2048,
            },
            smart_rollup_enable: false,
            smart_rollup_arith_pvm_enable: false,
            smart_rollup_origination_size: 6314,
            smart_rollup_challenge_window_in_blocks: 80640,
            smart_rollup_stake_amount: 10000000000u64.into(),
            smart_rollup_commitment_period_in_blocks: 60,
            smart_rollup_max_lookahead_in_blocks: 172800,
            smart_rollup_max_active_outbox_levels: 80640,
            smart_rollup_max_outbox_messages_per_level: 100,
            smart_rollup_number_of_sections_in_dissection: 32,
            smart_rollup_timeout_period_in_blocks: 40320,
            smart_rollup_max_number_of_cemented_commitments: 5,
            smart_rollup_max_number_of_parallel_games: 32,
            zk_rollup_enable: false,
            zk_rollup_origination_size: 4000,
            zk_rollup_min_pending_to_process: 10,
        }
    }
}

pub struct Config {
    pub tezos: TezosConfig,
    pub max_block_header_length: i32,
    pub max_operations_list_length: i32,
    pub pow_nonce: String,
}

impl Config {
    pub fn default() -> Self {
        Self {
            tezos: TezosConfig::default(),
            max_block_header_length: 2048,
            max_operations_list_length: 1024,
            pow_nonce: "deadbeef".into(),
        }
    }
}
